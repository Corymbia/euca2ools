#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009-2011, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com
#         Mitch Garnaat mgarnaat@eucalyptus.com

import euca2ools.controller

USAGE = """
Detaches a volume from an instance.

euca-detach-volume [-h, --help] [--version] [--debug] [--force] volume_id

REQUIRED PARAMETERS
	
volume_id			unique id for a volume to detach.

OPTIONAL PARAMETERS

-i, --instance 			unique id of a running instance to attach the volume to.

-d, --device			local device name (inside the guest VM) to use.

--force 			force the volume to be detached

"""

def get_volume_params(volumes, volume_id):
    for volume in volumes:
        if volume.id == volume_id:
            if volume.status == 'in-use':
                return (volume.instance_id, volume.device)
    return ('', '')

def main():
    volume_id = None
    instance_id = None
    device = None
    force = False
    controller = euca2ools.controller.Controller('d:i:',
                                                 ['device=', 'force', 'instance='],
                                                 cmd_usage=USAGE)
    for (name, value) in controller.opts:
        if name in ('-i', '--instance'):
            instance_id = value
        elif name in ('-d', '--device'):
            device = value
        elif name in ('--force'):
            force = True

    if len(controller.args) >= 1:
        volume_id = controller.args[0]
        
    if volume_id:
        controller.validate_volume_id(volume_id)
        if instance_id:
            controller.validate_instance_id(instance_id)
        euca_conn = controller.make_connection_cli()
        return_code = controller.make_request_cli(euca_conn,
                                                  'detach_volume',
                                                  volume_id=volume_id,
                                                  instance_id=instance_id,
                                                  device=device,
                                                  force=force)
        if return_code:
            print 'VOLUME\t%s' % volume_id
    else:
        msg = 'volume_id must be specified'
        controller.display_error_and_exit(msg)

if __name__ == '__main__':
    main()

