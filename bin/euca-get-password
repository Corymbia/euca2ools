#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 20092011, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com
#         Mitch Garnaat mgarnaat@eucalyptus.com

import euca2ools.controller

USAGE = """
Retrieves decrypts the administrator password for a Windows instance.

euca-get-password instance_id -k privatekey [-h, --help] [--version] [--debug]

REQUIRED PARAMETERS

instance_id			Identifier of a Windows instance.

-k				Private key file that corresponds to the keypair used to launch the instance.

OPTIONAL PARAMETERS

"""

def main():
    instance_id = None
    private_key_path = None
    controller = euca2ools.controller.Controller('k:', cmd_usage=USAGE)

    for (name, value) in controller.opts:
        if name == '-k':
            private_key_path = value

    if len(controller.args) >= 1:
        instance_id = controller.args[0]
        
    if instance_id and private_key_path:
        controller.validate_instance_id(instance_id)
        controller.validate_file(private_key_path)
        euca_conn = controller.make_connection_cli()
        password_data = controller.make_request_cli(euca_conn,
                                                    'get_password_data',
                                                    instance_id=instance_id)
        if password_data:
            # TODO - this is actually in the bundler
            print controller.decrypt_string(password_data,
                                            private_key_path,
                                            encoded=True)
    else:
        msgs = ['Error:']
        if not instance_id:
            msgs.append('\tinstance_id must be specified.')
        if not private_key_path:
            msgs.append('\tprivate_key_path (-k) must be specified.')
        controller.display_error_and_exit('\n'.join(msgs))

if __name__ == '__main__':
    main()

