#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
from euca2ools import Euca2ool, FileValidationError, Util, ConnectionFailed
from boto.exception import S3ResponseError, S3CreateError

usage_string = """
Check if a bucket exists.

euca-check-bucket -b, --bucket bucket [--euca-auth] [--debug] [-h, --help] [--version]

REQUIRED PARAMETERS

-b, --bucket 			The name of the bucket to check.

OPTIONAL PARAMETERS

"""


def usage(status=1):
    print usage_string
    Util().usage()
    sys.exit(status)

def version():
    print Util().version()
    sys.exit()

def ensure_bucket(connection, bucket):
    bucket_instance = None
    try:
	print 'Checking bucket:', bucket
	bucket_instance = connection.get_bucket(bucket)
    except S3ResponseError, s3error:
	sys.exit(1)
    return bucket_instance
 
def main():
    euca = None
    try:
        euca = Euca2ool('b:',
                        ['bucket='],
                        is_s3=True)
    except Exception, e:
	print e
        usage()
 
    bucket=None
    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage(0)
        elif name in ('-b', '--bucket'):
            bucket = value
	elif name == '--version':
	    version()
    
    if bucket:
        try:
	    conn = euca.make_connection()
	except ConnectionFailed, e:
	    print e.message
	    sys.exit(1)

	bucket_instance = ensure_bucket(conn, bucket)
    else:
	if not bucket:
	    print 'bucket must be specified.'	
        usage()

if __name__ == "__main__":
    main()
 
