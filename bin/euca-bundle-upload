#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
from xml.dom import minidom
from euca2ools import Euca2ool, FileValidationError, Util, ConnectionFailed
from boto.exception import S3ResponseError, S3CreateError
from boto.s3 import Connection
from boto.s3.key import Key

usage_string = """
Bundle an image and uploads it on behalf of a registered user.

**Prototype**

euca-nc-bundle-upload -i, --image image_path --user user -k, 
-b, --bucket bucket -d, --directory bundle_path 
[-c, --policy] [--policysignature]
[-p, --prefix prefix] [--kernel kernel_id] [--ramdisk ramdisk_id] 
[-B, --block-device-mapping mapping] [-a, --access-key access_key_id] 
[-s, --secret-key secret_key] [--acl canned_acl] [--ec2cert ec2cert_path]
[--url url] [--euca-auth] [--debug] [-h, --help] [--version]

REQUIRED PARAMETERS

-b, --bucket 			The name of the bucket to upload to. Bucket will be created if it does not exist.

-i, --image			Path to the image file to bundle.

-u, --user			User ID (12-digit) of the user who is bundling the image.

-d, --directory			Working directory where the bundle should be generated.

OPTIONAL PARAMETERS

-c, --policy			Base64 encoded S3 upload policy.

--policysignature		Signature for the upload policy.

--acl				Canned access control policy (defaults to "aws-exec-read").

--ec2cert			The path to the Cloud's X509 public key certificate.

"""


def usage(status=1):
    print usage_string
    Util().usage()
    sys.exit(status)

def version():
    print Util().version()
    sys.exit()

def create_bucket(connection, bucket, canned_acl=None):
    print 'Creating bucket:', bucket
    return connection.create_bucket(bucket, policy=canned_acl)

def ensure_bucket(connection, bucket, canned_acl=None):
    bucket_instance = None
    try:
	print 'Checking bucket:', bucket
	bucket_instance = connection.get_bucket(bucket)
    except S3ResponseError, s3error:
        s3error_string = '%s' % (s3error)
	if (s3error_string.find("404") >= 0):
	    try:
                bucket_instance = create_bucket(connection, bucket, canned_acl) 
	    except S3CreateError:
		print 'Unable to create bucket %s' % (bucket)
		sys.exit()
	elif (s3error_string.find("403") >= 0):
	    print "You do not have permission to access bucket:", bucket
	    sys.exit()
	else:
	    print s3error_string
	    sys.exit()
    return bucket_instance
 
def get_parts(manifest_filename):
    parts = []
    dom = minidom.parse(manifest_filename) 
    manifest_elem = dom.getElementsByTagName('manifest')[0]
    parts_list = manifest_elem.getElementsByTagName('filename')
    for part_elem in parts_list:
	nodes = part_elem.childNodes
	for node in nodes:
            if node.nodeType == node.TEXT_NODE:
                parts.append(node.data)
    return parts

def upload_manifest(euca, bucket_instance, manifest_filename,
                    canned_acl=None, upload_policy=None,
                    upload_policy_signature=None):
    print 'Uploading manifest file'
    k = Key(bucket_instance)
    k.key = euca.get_relative_filename(manifest_filename)
    manifest_file = open(manifest_filename, "rb")
    headers = {}
    if upload_policy:
        headers['S3UploadPolicy'] = upload_policy
    if upload_policy_signature:
        headers['S3UploadPolicySignature']=upload_policy_signature

    try:
        k.set_contents_from_file(manifest_file, policy=canned_acl, headers=headers)
    except S3ResponseError, s3error:
        s3error_string = '%s' % (s3error)
	if (s3error_string.find("403") >= 0):
	    print "Permission denied while writing:", k.key
	else:
	    print s3error_string
	sys.exit(1)
	
def upload_parts(bucket_instance, directory, parts, part_to_start_from, canned_acl=None, upload_policy=None, upload_policy_signature=None):
    if part_to_start_from:
        okay_to_upload = False
    else:
	okay_to_upload = True

    headers = {}
    if upload_policy:
        headers['S3UploadPolicy'] = upload_policy
    if upload_policy_signature:
        headers['S3UploadPolicySignature']=upload_policy_signature

    for part in parts:
        part = get_relative_filename(part)
	if part == part_to_start_from:
	    okay_to_upload = True
	if okay_to_upload:
            print 'Uploading part:', part
            k = Key(bucket_instance)
            k.key = part
            part_file = open(os.path.join(directory, part), "rb")
	    try:
                k.set_contents_from_file(part_file, policy=canned_acl, headers=headers)
	    except S3ResponseError, s3error:
   	        s3error_string = '%s' % (s3error)
		if (s3error_string.find("403") >= 0):
	    	    print "Permission denied while writing:", k.key
		else:
	    	    print s3error_string
		sys.exit(1)
	
def main():
    euca = None
    try:
        euca = Euca2ool('b:i:u:k:o:d:c:',
                                  ['bucket=', 'user=', 
                                  'image=', 'directory=', 'ec2cert=',
                                  'kernel=', 'ramdisk=', 'policy=', 'policysignature='],
				  is_s3=True)
    except Exception, e:
	print e
        usage()
    bucket=None
    image_path = None
    user = None
    directory = os.path.abspath('/tmp')
    canned_acl = 'ec2-bundle-read' 
    debug = False
    prefix = None
    mapping = None
    product_code_string = None
    target_arch='x86_64'
    kernel = None
    ramdisk = None
    product_codes = None
    policy = None
    policy_signature = None

    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage(0)
        elif name in ('-b', '--bucket'):
            bucket = value
        elif name in ('-i', '--image'):
            image_path = value
        elif name in ('-u', '--user'):
            user = value
        elif name == '--acl':
            canned_acl = value
        elif name in ('-d', '--directory'):
            directory = value
        elif name in ('-c', '--policy'):
            policy = value
        elif name == '--policysignature':
            policy_signature = value
        elif name == '--kernel':
            kernel = value
        elif name == '--ramdisk':
            ramdisk = value
        elif name == '--url':
            url = value
	elif name == '--version':
	    version()
    
    try:
        cert_path=euca.get_environ('EC2_CERT')
        ec2cert_path=euca.get_environ('EUCALYPTUS_CERT')
        user_string = euca.get_environ('EC2_USER_ID')
    except NotFoundError:
	sys.exit(1)

    if user_string:
        try:
            user = int(user_string)
        except ValueError:
            print 'Invalid user', user_string
            sys.exit()	       
	user = user_string
   
    if bucket and image_path and user and cert_path:
	try:
	    euca.validate_file(image_path)
	except FileValidationError:
	    print 'Invalid image %s' % (image_path)
	    sys.exit(1)

        try:
            conn = euca.make_connection() 
	except ConnectionFailed, e:
	    print e.message
	    sys.exit(1)

 	image_size, sha_image_digest = euca.check_image(image_path, directory)
	if not prefix:
            prefix = euca.get_relative_filename(image_path)
        try:
	    tgz_file = euca.tarzip_image(prefix, image_path, directory)
        except NotFoundError:
            sys.exit(1)
	except CommandFailed:
	    sys.exit(1)

	encrypted_file, key, iv, bundled_size = euca.encrypt_image(tgz_file)
	os.remove(tgz_file)
	parts, parts_digest = euca.split_image(encrypted_file)
        if mapping:
            mapping = get_block_devs(mapping)
	if product_code_string:
	    product_codes = add_product_codes(product_code_string, product_codes)   
        manifest_path = euca.generate_manifest(directory, prefix, parts, parts_digest, image_path, key, iv, cert_path, ec2cert_path, None, target_arch, image_size, bundled_size, sha_image_digest, user, kernel, ramdisk, mapping, product_codes)
        os.remove(encrypted_file)
	bucket_instance = ensure_bucket(conn, bucket, canned_acl)
        if not directory:
	    manifest_path_parts = manifest_path.split('/')
	    directory = manifest_path.replace(manifest_path_parts[len(manifest_path_parts) - 1], '')
	upload_manifest(euca, bucket_instance, manifest_path, canned_acl, policy, policy_signature)
	upload_parts(bucket_instance, directory, parts, None, canned_acl, policy, policy_signature)
	print "Uploaded image as %s/%s" % (bucket, get_relative_filename(manifest_path))
        conn.make_request(bucket=bucket, key=euca.get_relative_filename(manifest_path), action='ValidateImage')
        print 'Validated manifest %s/%s' % (bucket, get_relative_filename(manifest_path))
    else:
	if not bucket:
	    print 'bucket must be specified.'	
	if not image_path:
	    print 'image path must be specified.'
        if not user:
            print 'user must be specified.'
        if not directory:
            print 'directory must be specified.'
        usage()

if __name__ == "__main__":
    main()
 
