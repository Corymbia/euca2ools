#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009-2011, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com
#         Mitch Garnaat mgarnaat@eucalyptus.com

import euca2ools.controller

USAGE = """
Shows information about machine images.

euca-describe-images [-a] [-o owner] [-x user] [-h, --help] [--version] [--debug] [image1 image2 ... imageN]

OPTIONAL PARAMETERS

image1 image2 ... imageN	Images to describe.

-a 				Show all images that the user has access to.

-o 				Show only images owned by the owner specified are displayed.	

-x 				Show only images that the specified user is permitted to launch.

--filter                        A filter for limiting results.  Can be
                                specified multiple times.

"""

def display_images(images):
    for image in images:
        image_string = '%s\t%s\t%s\t%s' % (image.id, image.location,
                image.ownerId, image.state)
        if image.is_public:
            image_string += '\tpublic'
        else:
            image_string += '\tprivate'

        image_string += '\t%s' % ','.join(image.product_codes)

        for i in [image.architecture, image.type, image.kernel_id,
                  image.ramdisk_id]:
            image_string += '\t%s' % ((' ' if i == None else i))

        if image.platform:
            image_string += '\t%s' % image.platform
        if image.root_device_type:
            image_string += '\t%s' % image.root_device_type
        print 'IMAGE\t%s' % image_string
        if image.block_device_mapping:
            block_dev_mapping = image.block_device_mapping
            if image.root_device_type == 'ebs':
                block_dev_string = '%s\t%s\t%s' \
                    % (block_dev_mapping.current_name,
                       block_dev_mapping.current_value.snapshot_id,
                       block_dev_mapping.current_value.size)
                print 'BLOCKDEVICEMAPPING\t%s' % block_dev_string

def main():
    controller = euca2ools.controller.Controller('ao:x:',
                                                 long_opts=['filter='],
                                                 compat=True,
                                                 cmd_usage=USAGE)
    all_ids = False
    owners = []
    executable_by = []
    image_ids = []

    for (name, value) in controller.opts:
        if name == '-x':
            executable_by.append(value)
        elif name == '-o':
            owners.append(value)
        elif name == '-a':
            all_ids = True

    image_ids = controller.args

    if all_ids and ( len(owners) or len(executable_by) or len(image_ids) ):
        msg = '-a cannot be combined with owner, launch, or image list'
        controller.display_error_and_exit(msg)

    euca_conn = controller.make_connection_cli()
    if len(owners) == 0 and len(executable_by) == 0 and \
       len(image_ids) == 0 and not all_ids:
        owned = controller.make_request_cli(euca_conn,
                                            'get_all_images',
                                            image_ids=None,
                                            owners=['self'],
                                            executable_by=None)
        launchable = controller.make_request_cli(euca_conn,
                                                 'get_all_images',
                                                 image_ids=None,
                                                 owners=None,
                                                 executable_by=['self'])
        image_set = set()
        image_set.update(owned)
        image_set.update(launchable)
        images = list(image_set)
    else:
        images = controller.make_request_cli(euca_conn,
                                             'get_all_images',
                                             image_ids=image_ids,
                                             owners=owners,
                                             executable_by=executable_by)

    display_images(images)


if __name__ == '__main__':
    main()

